#summary geometry object definitions and operations etc.

back to [MonoCAMArchitecture]

= GEO =
Each geometric entity (point, curve, surface) consists of a GEO object.

Each GEO object should have:

Each geometry object should have these common features

 * glData

 * properties (what properties of this object can the GUI edit)
  * A unique name
  * some method for automagically finding out the list of possible properties is needed!
  * layer
  * color
  * rendermode
  * shown/hidden
 * glData (i.e. an OpenGL interface)
  * color
  * rendermode (shade/wireframe)
  * type (point, line, triangle)
  * points (interpreted as coordinates for either point, line, triangle)
  * the object should probably store the display-list ID 
  * a mechanism for messaging to the GUI that something has changed and we need to generate a new display-list
 * CAM interface
  * A method for outputting itself in a CAM friendly format. This is mostly the same format as for OpenGL (points,lines,triangles), but the difference is that a given tolerance value in mm should be respected when converting to triangles/lines

Examples of simple GEO objects are:
 * STLSurf, a triangulated surface (for example read from an STL file)
 * Point
 * Line
 * Arc/Circle
 * ToolPath

Compound objects could easily be created from simple objects. Such as:
 * rectangle (set of four lines)
 * etc

== Relational Geometry ==
RelationalGeometry is a nice object oriented way of implementing parametric CAD.
